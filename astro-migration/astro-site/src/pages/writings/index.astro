---
import Layout from '../../components/Layout.astro';
import ImagekitImage from '../../components/ImagekitImage.tsx';
import Chip from '../../components/Chip.jsx'; // Assuming simple component, no client directive for now
import { isToday, formatRelative } from 'date-fns';
import { enIN } from 'date-fns/locale/en-IN';

const allContent = await Astro.glob('../../content/(writings|memos)/**/*.{md,mdx}');

const publishedAndSortedContent = allContent
  .filter(item => item.frontmatter.published !== false && item.frontmatter.draft !== true && !item.frontmatter.archived)
  .sort((a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime());

const currentFilter = Astro.url.searchParams.get('filter') || 'all'; // 'all', 'blog', 'memo'

const postsToShow = publishedAndSortedContent.filter(item => {
  if (currentFilter === 'all') return true;
  if (currentFilter === 'blog') return item.file.includes('/writings/');
  if (currentFilter === 'memo') return item.file.includes('/memos/');
  return true;
});

const getPostType = (post) => {
  return post.file.includes('/memos/') ? 'Memo' : 'Post';
};

const baseUrl = Astro.url.origin; // Or your production URL: Astro.site?.toString() || Astro.url.origin
const pageTitle = "Writings - Aravind Balla";
const pageDescription = "Blog posts and memos from Aravind Balla on software development, productivity, and more.";
const canonicalUrl = new URL('/writings/', Astro.site || Astro.url.origin).toString();

// Function to construct post URL (slug is filename without extension)
const getPostUrl = (post, postType) => {
  const collection = postType === 'Memo' ? 'memos' : 'writings';
  return `/${collection}/${post.slug}`; // post.slug from Astro.glob is usually the base filename
};

// Function to construct banner image source
// post.slug is 'my-cool-post' for '.../content/writings/my-cool-post.mdx'
const getBannerSrc = (post) => {
  if (!post.frontmatter.banner) return null;
  return `${post.slug}-${post.frontmatter.banner}`; // e.g., "my-cool-post-banner.jpg"
};

const getFilterLinkClass = (filterType) => {
  return currentFilter === filterType
    ? "text-purple-500 dark:text-purple-400 border-b-2 border-purple-500"
    : "hover:text-purple-500 dark:hover:text-purple-400";
};
---

<Layout>
  <title slot="head">{pageTitle}</title>
  <meta slot="head" name="description" content={pageDescription} />
  <link slot="head" rel="canonical" href={canonicalUrl} />
  {/* Add other OG/Twitter card meta tags here if needed */}

  <div class="prose lg:prose-lg dark:prose-light max-w-none">
    <header class="mb-12 text-center">
      <h1 class="text-4xl font-bold !mb-4">Writings</h1>
      <p class="text-xl !mt-0 text-gray-600 dark:text-gray-400">
        Thoughts on software, productivity, and life. Filter by type:
      </p>
      <nav class="mt-6 space-x-4">
        <a href="/writings/" class={getFilterLinkClass('all')}>All</a>
        <a href="/writings/?filter=blog" class={getFilterLinkClass('blog')}>Blog Posts</a>
        <a href="/writings/?filter=memo" class={getFilterLinkClass('memo')}>Memos</a>
      </nav>
      {currentFilter === 'memo' && (
        <p class="mt-4 text-sm text-gray-500 dark:text-gray-300">
          Memos are short, atomic posts, often unpolished thoughts or updates.
        </p>
      )}
    </header>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {postsToShow.map((post) => {
        const postType = getPostType(post);
        const postUrl = getPostUrl(post, postType);
        const bannerSrc = getBannerSrc(post);
        const hasBanner = !!bannerSrc;

        return (
          <article class={`flex flex-col rounded-lg shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 dark:bg-gray-800 ${hasBanner ? 'md:row-span-2' : 'md:row-span-1'}`}>
            {hasBanner && (
              <a href={postUrl} class="block aspect-video">
                <ImagekitImage
                  src={bannerSrc}
                  alt={post.frontmatter.title || 'Post banner'}
                  width={720}  // Example width, adjust as needed
                  height={400} // Example height, adjust
                  className="w-full h-full object-cover"
                />
              </a>
            )}
            <div class="p-6 flex flex-col justify-between flex-grow">
              <div>
                <div class="flex justify-between items-center mb-2">
                  <p class="text-sm text-gray-500 dark:text-gray-400 !my-0">
                    {isToday(new Date(post.frontmatter.date))
                      ? `Today, ${formatRelative(new Date(post.frontmatter.date), new Date(), { locale: enIN }).split(' at')[0]}`
                      : new Date(post.frontmatter.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                  </p>
                  {postType === 'Memo' && <Chip>Memo</Chip>}
                </div>
                <h2 class="text-xl font-semibold !my-0">
                  <a href={postUrl} class="hover:underline">{post.frontmatter.title}</a>
                </h2>
                <div class="mt-3 text-sm text-gray-600 dark:text-gray-400" set:html={post.rawContent().slice(0, 150) + '...'}>
                </div>
              </div>
              <a href={postUrl} class="mt-4 text-sm text-purple-500 dark:text-purple-400 hover:underline self-start">
                Read more &rarr;
              </a>
            </div>
          </article>
        );
      })}
    </div>

    {postsToShow.length === 0 && (
      <p class="text-center text-gray-500 dark:text-gray-400 py-12">
        No {currentFilter !== 'all' ? currentFilter : ''} posts found. Try a different filter!
      </p>
    )}
  </div>
</Layout>
```
